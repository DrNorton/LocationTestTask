using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Text;

//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LocationTestTask.DataLayer.DataEntities
{
    [global::System.Data.Linq.Mapping.TableAttribute(Name = "Locations")]
    public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged,IEntity
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private long _Id;

        private long _MapPositionId;

        private System.DateTime _Datetime;

        private EntityRef<MapPosition> _MapPosition;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnMapPositionIdChanging(long value);
        partial void OnMapPositionIdChanged();
        partial void OnDatetimeChanging(System.DateTime value);
        partial void OnDatetimeChanged();
        #endregion

        public Location()
        {
            this._MapPosition = default(EntityRef<MapPosition>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "BigInt NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_MapPositionId", DbType = "BigInt NOT NULL")]
        public long MapPositionId
        {
            get
            {
                return this._MapPositionId;
            }
            set
            {
                if ((this._MapPositionId != value))
                {
                    if (this._MapPosition.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnMapPositionIdChanging(value);
                    this.SendPropertyChanging();
                    this._MapPositionId = value;
                    this.SendPropertyChanged("MapPositionId");
                    this.OnMapPositionIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Datetime", DbType = "DateTime NOT NULL")]
        public System.DateTime Datetime
        {
            get
            {
                return this._Datetime;
            }
            set
            {
                if ((this._Datetime != value))
                {
                    this.OnDatetimeChanging(value);
                    this.SendPropertyChanging();
                    this._Datetime = value;
                    this.SendPropertyChanged("Datetime");
                    this.OnDatetimeChanged();
                }
            }
        }

        [global::System.Runtime.Serialization.IgnoreDataMember]
        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "fk_Locations_MapPosition", Storage = "_MapPosition", ThisKey = "MapPositionId", OtherKey = "Id", IsForeignKey = true)]
        public MapPosition MapPosition
        {
            get
            {
                return this._MapPosition.Entity;
            }
            set
            {
                MapPosition previousValue = this._MapPosition.Entity;
                if (((previousValue != value)
                            || (this._MapPosition.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._MapPosition.Entity = null;
                        previousValue.Locations.Remove(this);
                    }
                    this._MapPosition.Entity = value;
                    if ((value != null))
                    {
                        value.Locations.Add(this);
                        this._MapPositionId = value.Id;
                    }
                    else
                    {
                        this._MapPositionId = default(long);
                    }
                    this.SendPropertyChanged("MapPosition");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

   
}
